// Memoria do sistema
PUSHI 0 
PUSHI 0 
PUSHI 0 
PUSHI 0 
PUSHI 0 
PUSHI 0 
PUSHI 0 

// Memoria das variaveis

start
PUSHI 10
PUSHI 0
PUSHA do0 
CALL

do0: 
ALLOC 2 
PUSHFP  
LOAD -1 // Guardar counter 
STORE 0 
PUSHST 0 
PUSHFP 
LOAD -2 // Guardar limite 
STORE 1 
PUSHA doLoop0 
CALL 
RETURN 

doLoop0:
PUSHST 0
LOAD 0 // Carregar counter
DUP 1 
STOREG 6 // Armazenar valor atual do contador para o I conseguir ler 
PUSHST 0
LOAD 1 // Carregar limite
INF
JZ endLoop0
// Conteudo
PUSHS "ola" 
WRITES 
PUSHG 6 
WRITEI 
PUSHS " " 
WRITES 
// Fim conteudo
PUSHST 0
PUSHST 0
LOAD 0 // Carregar counter
PUSHI 1
ADD  
STORE 0 // Store Counter++
JUMP doLoop0
endLoop0: 
PUSHI 5
PUSHI 0
PUSHA do1 
CALL

do1: 
ALLOC 2 
PUSHFP  
LOAD -1 // Guardar counter 
STORE 0 
PUSHST 1 
PUSHFP 
LOAD -2 // Guardar limite 
STORE 1 
PUSHA doLoop1 
CALL 
RETURN 

doLoop1:
PUSHST 1
LOAD 0 // Carregar counter
DUP 1 
STOREG 6 // Armazenar valor atual do contador para o I conseguir ler 
PUSHST 1
LOAD 1 // Carregar limite
INF
JZ endLoop1
// Conteudo
PUSHS "adeus" 
WRITES 
PUSHG 6 
WRITEI 
PUSHS " " 
WRITES 
// Fim conteudo
PUSHST 1
PUSHST 1
LOAD 0 // Carregar counter
PUSHI 1
ADD  
STORE 0 // Store Counter++
JUMP doLoop1
endLoop1: 
stop

//---------------- Funções do sistema ----------------//
vmMinElse: // Função Continuação da vmMin
	pushfp
	load -1
	return

vmMin: // Retorna o menor valor (MIN do forth)
	pushfp
	load -2
	pushfp
	load -1
	inf
	jz vmMinElse
	pushfp
	load -2
	return
//---------------------------------------------------//
vmMaxElse: // Função Continuação da vmMax
	pushfp
	load -1
	return

vmMax: // Retorna o maior valor (MAX do forth)
	pushfp
	load -2
	pushfp
	load -1
	sup
	jz vmMaxElse
	pushfp
	load -2
	return
//---------------------------------------------------//
vmAbsElse: // Função continuação do vmAbs (Valor <0)
	pushfp
	load -1	
	pushi -1
	mul
	return

vmAbs: // Retorna absoluto do 1 elem (ABS do forth)
	pushfp
	load -1
	pushi 0
	sup
	jz vmAbsElse // O valor é <0
	pushfp
	load -1
	return

//---------------------------------------------------//
vmSpaceLoop: // Printa o numero de espaços no topo da stack
	pushg 0
	pushi 1
	sub
	storeg 0
	pushg 0
	pushs " "
	writes
	not
	jz vmSpaceLoop
	return
//---------------------------------------------------//